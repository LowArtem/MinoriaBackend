// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinoriaBackend.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinoriaBackend.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240823210008_AddTransactionStatus")]
    partial class AddTransactionStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinoriaBackend.Core.Model.Accounts.BaseAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountVariant")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BaseAccounts");

                    b.HasDiscriminator<string>("AccountVariant").HasValue("BaseAccount");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNecessary")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TransferToId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TransferToId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TelegramChatId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Accounts.Account", b =>
                {
                    b.HasBaseType("MinoriaBackend.Core.Model.Accounts.BaseAccount");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<decimal>("AmountReserved")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("Account");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Accounts.VirtualAccount", b =>
                {
                    b.HasBaseType("MinoriaBackend.Core.Model.Accounts.BaseAccount");

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GoalLink")
                        .HasColumnType("text");

                    b.Property<decimal>("SavingGoal")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("VirtualAccount");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Accounts.BaseAccount", b =>
                {
                    b.HasOne("MinoriaBackend.Core.Model.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Transaction", b =>
                {
                    b.HasOne("MinoriaBackend.Core.Model.Accounts.BaseAccount", "Account")
                        .WithMany("TransactionsFromAccount")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinoriaBackend.Core.Model.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinoriaBackend.Core.Model.Accounts.BaseAccount", "TransferTo")
                        .WithMany("TransactionsToAccount")
                        .HasForeignKey("TransferToId");

                    b.HasOne("MinoriaBackend.Core.Model.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");

                    b.Navigation("TransferTo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Accounts.BaseAccount", b =>
                {
                    b.Navigation("TransactionsFromAccount");

                    b.Navigation("TransactionsToAccount");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MinoriaBackend.Core.Model.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
